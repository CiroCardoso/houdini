// Scale UV tile
// Ciro Cardoso - 06/2025
// Comments, issues or suggestions - cirocardoso@yahoo.co.uk

// Use the udim tile node to create the udim_tile prim attribute
// Run Over Vertices

// --- User Parameters ---
string target_udims_string = chs("target_udims_str"); 
float scale_factor = chf("scale_amount");

// --- Logic ---
int prim_tile_id = -1;

if (hasprimattrib(0, "udim_tile")) {
    // Assuming 'udim_tile' is an integer attribute
    prim_tile_id = prim(0, "udim_tile", @primnum);
}

if (prim_tile_id != -1 && target_udims_string != "") {

    string udim_list_array[] = split(target_udims_string, ", ");

    int is_target_udim = 0;

    
    foreach (string udim_str_from_list; udim_list_array) {
        if (udim_str_from_list == "") {
            continue;
        }

        int udim_int_from_list = atoi(udim_str_from_list);

        if (udim_int_from_list == prim_tile_id && udim_int_from_list >= 1001) { 
            is_target_udim = 1;
            break; // Found a match, no need to check further in this list
        }
    }

    if (is_target_udim == 1) {
        int current_target_tile_for_pivot = prim_tile_id;

        int u_tile_offset = (current_target_tile_for_pivot - 1001) % 10;
        int v_tile_offset = (current_target_tile_for_pivot - 1001) / 10;

        vector pivot_point;
        pivot_point.x = u_tile_offset + 0.5;
        pivot_point.y = v_tile_offset + 0.5;
        pivot_point.z = 0;

        vector current_vertex_uv = v@uv;
        current_vertex_uv -= pivot_point;
        current_vertex_uv *= scale_factor;
        current_vertex_uv += pivot_point;

        v@uv.x = current_vertex_uv.x;
        v@uv.y = current_vertex_uv.y;
    }
}